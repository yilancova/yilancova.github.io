<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Программирование | Academic</title>
    <link>https://yilancova.github.io/tag/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/</link>
      <atom:link href="https://yilancova.github.io/tag/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/index.xml" rel="self" type="application/rss+xml" />
    <description>Программирование</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 27 Apr 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://yilancova.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Программирование</title>
      <link>https://yilancova.github.io/tag/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/</link>
    </image>
    
    <item>
      <title>Реализация класса Вектор</title>
      <link>https://yilancova.github.io/project/example/</link>
      <pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://yilancova.github.io/project/example/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Что нужно знать для реализации?&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Указатели&lt;/li&gt;
&lt;li&gt;Move семантика (Дополнительный этап)&lt;/li&gt;
&lt;li&gt;rValue и lValue ссылки (Дополнительный этап)&lt;/li&gt;
&lt;li&gt;Шаблоны&lt;/li&gt;
&lt;li&gt;Итераторы (Дополнительный этап)&lt;/li&gt;
&lt;li&gt;Переопределение операторов&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Введение&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Я буду использовать c++20. Также эта статья разбита на этапы:
Первый и второй этапы обязательны. Данный гайд предназначен для новичков&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Первый этап&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Для начала нужно создать шаблонный класс. Для этого используется template. Далее определяем какие поля будет содержать класс:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Указатель на область памяти, где будет находиться массив.&lt;/li&gt;
&lt;li&gt;Размер вектора (size)&lt;/li&gt;
&lt;li&gt;Максимальный размер вектора (capacity)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;С первым и вторым пунктом всё понятно. А для чего нужен третий? Отвечая на этот вопрос, нужно вспомнить, что вектор - это динамический массив. Поэтому, чтобы каждый раз, при добавлении элемента, не выделять новую память, нужно выделить её с запасом. Также надо добавить конструктор класса.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Второй этап&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Теперь нужно добавить эти методы:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Метод, который проверяет пустой ли список: [[nodiscard]] bool isEmpty() const {
return size_ == 0;
}&lt;/li&gt;
&lt;li&gt;Метод получения размера вектора:
[[nodiscard]] size_t size() const {
return size_;
}&lt;/li&gt;
&lt;li&gt;Метод получения максимального размера вектора:
[[nodiscard]] size_t capacity() const {
return capacity_;
}&lt;/li&gt;
&lt;li&gt;Метод выделения новой памяти. Мы будем создавать новый массив arr_ с размером capacity * 2, чтобы выделять память с запасом. Но перед этим надо записать предыдущий массив arr_ в другой указатель tmp. Затем заполняем свободные ячейки массива arr_ ячейками tmp. Не забываем удалить указатель tmp, чтобы не было утечки памяти.
void addMemory() {
capacity_ &lt;em&gt;= 2;
T&lt;/em&gt; tmp = arr_;
arr_ = new T[capacity_];
for (size_t i = 0; i &amp;lt; size_; ++i) arr_[i] = tmp[i];
delete[] tmp;
}&lt;/li&gt;
&lt;li&gt;Метод добавления элемента
Для начало нужно проверить - есть ли свободные ячейки. Если их нет вызываем addMemory(). Далее записываем элемент в индекс size_ и увеличиваем size_ на 1.
void pushBack(const T&amp;amp; value) {
if (size_ &amp;gt;= capacity_) addMemory();
arr_[size_++] = value;
}&lt;/li&gt;
&lt;li&gt;Метод удаления элемента
Здесь нужно уточнить, что у этого метода будет один аргумент - индекс элемента, который нужно удалить.
Чтобы удалить элемент в начале или в середине, нужно переместить все элементы, которые правее данного, на 1 ячейку. А затем уменьшить size_ на 1. Если же этот элемент находиться в конце массива, мы просто уменьшаем size_ на 1.
void remove(size_t index) {
for (size_t i = index + 1; i &amp;lt; size_; ++i) {
arr_[i - 1] = arr_[i];
}
&amp;ndash;size_;
}&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
